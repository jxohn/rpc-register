// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IDGenerateClient is the client API for IDGenerate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IDGenerateClient interface {
	GetIDs(ctx context.Context, in *GetIDsRequest, opts ...grpc.CallOption) (*GetIDsResponse, error)
}

type iDGenerateClient struct {
	cc grpc.ClientConnInterface
}

func NewIDGenerateClient(cc grpc.ClientConnInterface) IDGenerateClient {
	return &iDGenerateClient{cc}
}

func (c *iDGenerateClient) GetIDs(ctx context.Context, in *GetIDsRequest, opts ...grpc.CallOption) (*GetIDsResponse, error) {
	out := new(GetIDsResponse)
	err := c.cc.Invoke(ctx, "/model.IDGenerate/GetIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IDGenerateServer is the server API for IDGenerate service.
// All implementations must embed UnimplementedIDGenerateServer
// for forward compatibility
type IDGenerateServer interface {
	GetIDs(context.Context, *GetIDsRequest) (*GetIDsResponse, error)
	mustEmbedUnimplementedIDGenerateServer()
}

// UnimplementedIDGenerateServer must be embedded to have forward compatible implementations.
type UnimplementedIDGenerateServer struct {
}

func (UnimplementedIDGenerateServer) GetIDs(context.Context, *GetIDsRequest) (*GetIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIDs not implemented")
}
func (UnimplementedIDGenerateServer) mustEmbedUnimplementedIDGenerateServer() {}

// UnsafeIDGenerateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IDGenerateServer will
// result in compilation errors.
type UnsafeIDGenerateServer interface {
	mustEmbedUnimplementedIDGenerateServer()
}

func RegisterIDGenerateServer(s grpc.ServiceRegistrar, srv IDGenerateServer) {
	s.RegisterService(&IDGenerate_ServiceDesc, srv)
}

func _IDGenerate_GetIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDGenerateServer).GetIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.IDGenerate/GetIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDGenerateServer).GetIDs(ctx, req.(*GetIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IDGenerate_ServiceDesc is the grpc.ServiceDesc for IDGenerate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IDGenerate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.IDGenerate",
	HandlerType: (*IDGenerateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIDs",
			Handler:    _IDGenerate_GetIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
